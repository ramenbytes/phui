image: Visual Studio 2019

environment:
  matrix:
    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8"
      PYTHON_ARCH: "64"


init:
  - ps: echo "$Env:PYTHON $Env:PYTHON_VERSION $Env:PYTHON_ARCH $Env:MINICONDA"

install:
  # ensure that miniconda is installed on linux and mac machines
  - ps: |
      # urls and hashes from https://docs.conda.io/en/latest/miniconda.html
      $conda_installers = @{

        "linux" = @{"3.7" = @{"url" = "https://repo.anaconda.com/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh"
                              "hash" = "a1a7285dea0edc430b2bc7951d89bb30a2a1b32026d2a7b02aacaaa95cf69c7c"}
                    "3.8" = @{"url" = "https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-Linux-x86_64.sh"
                              "hash" = "935d72deb16e42739d69644977290395561b7a6db059b316958d97939e9bdf3d"}
                   }

        "mac"   = @{"3.7" = @{"url" = "https://repo.anaconda.com/miniconda/Miniconda3-py37_4.10.3-MacOSX-x86_64.sh"
                              "hash" = "ca7492d456c319d15682b2d3845112a631365f293d38d1f62872c33a2e57e430"}
                    "3.8" = @{"url" = "https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-MacOSX-x86_64.sh"
                              "hash" = "93e514e01142866629175f5a9e2e1d0bac8bc705f61d1ed1da3c010b7225683a"}
                   }
        }

      # Start setting up miniconda
      if ($isWindows){
        $Env:HOME = $Env:USERPROFILE
        $platform = "windows"

        # For windows it's already installed, we just need to move it to our
        # "standardized" location. To do that, construct the name of the
        # location appveyor has installed it to using the python version, and
        # remove the "." from the version.
        $current_location = "C:\Miniconda$Env:PYTHON_VERSION-x64" -replace "\."
        Move-Item -Path $current_location -Destination $Env:HOME\miniconda
      } elseif ($isLinux) {

        $platform = "linux"
        Invoke-WebRequest -OutFile miniconda-installer.sh $conda_installers[$platform][$Env:PYTHON_VERSION]["url"]

      } else {

        $platform = "mac"
        Invoke-WebRequest -OutFile miniconda-installer.sh $conda_installers[$platform][$Env:PYTHON_VERSION]["url"]

      }

        # get hashes for verification
        $installer_hash = (Get-FileHash -Algorithm SHA256 miniconda-installer.sh).Hash
        $expected_hash = $conda_installers[$platform][$Env:PYTHON_VERSION]["hash"]

        # if the hash is good, install
        if($installer_hash -eq $expected_hash)
        {
          bash ./miniconda-installer.sh -b -p $Env:HOME/miniconda
          # remove installer script now that we're done
          rm miniconda-installer.sh
        } else {
        Write-Output "Mismatched hash! Spooky stuff is afoot!" "Expected: $expected_hash" "Actual: $installer_hash"
        throw "bad hash!"
      }

  # this should set the path correctly for both windows & unix-like platforms
  - ps: |
      # deal with different path separators and different conda executable
      # locations per platform
      if ($isWindows) {
        $sep = ";"
        $bin = "\Scripts"
      } else {
        $sep = ":"
        $bin = "/bin"}

      # I /think/ the "/" won't be a problem on windows? We'll see.
      $Env:MINICONDA = "$Env:HOME/miniconda"
      $Env:PATH = "$Env:MINICONDA${sep}$Env:MINICONDA$bin${sep}$Env:PATH"
  - ps: Get-ChildItem -Path $Env:MINICONDA
  - ps: echo $Env:PATH
  - ps: conda --version
  - ps: conda config --set always_yes yes --set changeps1 no --set auto_update_conda false
  - ps: conda update -q conda
  - ps: conda install -q conda-build
  - ps: conda info -a
  - ps: |
      if ($isWindows) {
      python -m pip install --upgrade pip
      } else {
      conda install -c miniconda pip
      }
  - ps: pip install pyinstaller
  - pip install git+git://github.com/ramenbytes/phconvert@close-files-on-error

before_build:
  - ps: cd $Env:APPVEYOR_BUILD_FOLDER

build_script:
  - ps: Get-ChildItem -Path (Get-Location)
  - pyinstaller --hidden-import importlib --debug all --collect-data phconvert gui.py

after_build:
  - ps: 7z a phui-python$Env:PYTHON_VERSION.zip dist

# before_test:
#   - cd %APPVEYOR_BUILD_FOLDER%\notebooks\data
#   - dir
#   - ps: wget https://ndownloader.figshare.com/files/3350666 -OutFile dsdna_d7d17_50_50_1.set
#   - ps: wget https://ndownloader.figshare.com/files/3350669 -OutFile dsdna_d7d17_50_50_1.spc
#   - ps: wget https://ndownloader.figshare.com/files/3350672 -OutFile Pre.ht3
#   - ps: wget https://ndownloader.figshare.com/files/3350663 -OutFile 0023uLRpitc_NTP_20dT_0.5GndCl.sm
#   - ps: wget https://github.com/Photon-HDF5/phconvert/files/231343/Cy3.Cy5_diff_PIE-FRET.ptu.zip -OutFile Cy3.Cy5_diff_PIE-FRET.ptu.zip
#   - 7z e Cy3.Cy5_diff_PIE-FRET.ptu.zip
#   - ps: wget https://ndownloader.figshare.com/files/6955091 -OutFile 161128_DM1_50pM_pH74.ptu
#   - ps: wget https://ndownloader.figshare.com/files/14828594 -O 20161027_DM1_1nM_pH7_20MHz1.ptu
#   - ps: wget https://ndownloader.figshare.com/files/13675271 -OutFile TestFile_2.ptu
#   - ps: wget https://ndownloader.figshare.com/files/14850533 -O trace_T2_300s_1_coincidence.ptu
#   - ps: wget https://ndownloader.figshare.com/files/14890535 -O nanodiamant_histo.phu
#   - ps: wget https://github.com/dwaithe/FCS_point_correlator/raw/master/focuspoint/topfluorPE_2_1_1_1.pt3 -OutFile topfluorPE_2_1_1_1.pt3
#   - ps: wget https://github.com/Photon-HDF5/phconvert/files/1380341/DNA_FRET_0.5nM.pt3.zip -OutFile DNA_FRET_0.5nM.pt3.zip
#   - 7z e DNA_FRET_0.5nM.pt3.zip
#   - ps: wget https://github.com/Photon-HDF5/phconvert/files/1336330/data.zip -OutFile data.zip
#   - 7z e data.zip

# test_script:
#   - cd %APPVEYOR_BUILD_FOLDER%
#   - py.test -v
#   - cd %APPVEYOR_BUILD_FOLDER%\notebooks
#   - python %APPVEYOR_BUILD_FOLDER%/tests/nbrun.py

# after_test:
#   - cd %APPVEYOR_BUILD_FOLDER%
#   - python setup.py bdist_wheel
#   - echo %PATH%
#   - conda deactivate
#   - activate
#   - path
#   - where python
#   - where git
#   - conda build conda.recipe --python=%PYTHON_VERSION%  --quiet
#   - ps: cp $Env:MINICONDA\conda-bld\win-64\phconvert-*.tar.bz2 $Env:APPVEYOR_BUILD_FOLDER\dist

# artifacts:
#   # bdist_wheel puts your built wheel in the dist directory
#   - path: dist\*
#   - path: notebooks\*-out.ipynb
#   - path: notebooks\*.hdf5

artifacts:
  - path: phui*.zip

skip_tags: true

deploy:
  release: ahh-dont-look-$(APPVEYOR_BUILD_VERSION)
  description: 'Executables for others to test'
  provider: GitHub
  auth_token:
    secure: z+LVern0v7e0nQ2sg0JVc1IT27md9G+7ikI0FiyrxHaW3rMs9cy/ZdfyKj2vpwOX # your encrypted token from GitHub
    artifacts:
      - path: '*.zip'
  draft: false
  prerelease: false
  on:
    branch: master                 # release from master branch only
    # APPVEYOR_REPO_TAG: true        # deploy on tag push only
