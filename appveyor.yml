image: Visual Studio 2019

environment:
  matrix:
    - PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"

    - PYTHON_VERSION: "3.8"
      PYTHON_ARCH: "64"


init:
  - ps: |
      # Windows doesn't have HOME set, so make our own
      if ($isWindows){
        $Env:HOME = $Env:USERPROFILE
      }
  - ps: |
      # Mac and Linux don't come with miniconda installed, so we need to deal with that.
      # First off, we need to know where to install miniconda from. Making a
      # hashtable seems like the most declarative and flexible way.

      # Urls and file hashes from https://docs.conda.io/en/latest/miniconda.html
      $conda_installers = @{

        "linux" = @{"3.7" = @{"url" = "https://repo.anaconda.com/miniconda/Miniconda3-py37_4.10.3-Linux-x86_64.sh"
                              "hash" = "a1a7285dea0edc430b2bc7951d89bb30a2a1b32026d2a7b02aacaaa95cf69c7c"}
                    "3.8" = @{"url" = "https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-Linux-x86_64.sh"
                              "hash" = "935d72deb16e42739d69644977290395561b7a6db059b316958d97939e9bdf3d"}
                   }

        "mac"   = @{"3.7" = @{"url" = "https://repo.anaconda.com/miniconda/Miniconda3-py37_4.10.3-MacOSX-x86_64.sh"
                              "hash" = "ca7492d456c319d15682b2d3845112a631365f293d38d1f62872c33a2e57e430"}
                    "3.8" = @{"url" = "https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-MacOSX-x86_64.sh"
                              "hash" = "93e514e01142866629175f5a9e2e1d0bac8bc705f61d1ed1da3c010b7225683a"}
                   }
        }

  - ps: |
      # Originally we set the $platform flag down in the if statement
      # responsible for conda installation, but that required adding an extra
      # branch for when we're on a mac and duplicating some code. Pulling it out
      # here keeps the two things we want (initialize a platform flag, and
      # install conda) cleanly separated.
      if ($isWindows) {

      $platform = "windows"

      } elseif ($isLinux) {

      $platform = "linux"

      } else {

      $platform = "mac"

      }
  - ps: |
      # When on windows, simply move the pre-existing miniconda into the "home" folder
      # under the name "miniconda". On unix(-like) systems, which currently don't have
      # miniconda preinstalled, fetch and install it under $HOME/miniconda
      if ($isWindows){
        $Env:HOME = $Env:USERPROFILE

        # For windows it's already installed, we just need to move it to our
        # "standardized" location. To do that, construct the name of the
        # location appveyor has installed it to using the python version, and
        # remove the "." from the version.
        $current_location = "C:\Miniconda$Env:PYTHON_VERSION-x64" -replace "\."
        Move-Item -Path $current_location -Destination $Env:HOME\miniconda

      } else {

        Invoke-WebRequest -OutFile miniconda-installer.sh $conda_installers[$platform][$Env:PYTHON_VERSION]["url"]

        # get hashes for verification
        $installer_hash = (Get-FileHash -Algorithm SHA256 miniconda-installer.sh).Hash
        $expected_hash = $conda_installers[$platform][$Env:PYTHON_VERSION]["hash"]

        # if the hash is good, install
        if($installer_hash -eq $expected_hash)
        {
        bash ./miniconda-installer.sh -b -p $Env:HOME/miniconda
        # remove installer script now that we're done
        rm miniconda-installer.sh
        } else {
        Write-Output "Mismatched hash! Spooky stuff is afoot!" "Expected: $expected_hash" "Actual: $installer_hash"
        throw "bad hash!"
        }
      }
  - ps: |
      # Now that we've ensured that miniconda is installed, we need to make sure
      # that the stuff we need from it (conda, and maybe python?) are in our
      # path variables.

      # First, deal with differences in path separators and conda's bin folder
      # location for windows and unix(-like) systems.
      if ($isWindows) {
        $sep = ";"
        $bin = "\Scripts"
      } else {
        $sep = ":"
        $bin = "/bin"
      }

      # Now we can set the path and miniconda variables for all three platforms.
      # Note that windows doesn't have a problem with the "/" in the miniconda
      # var, the unix(-like) systems have issues with "\" if we use that
      # instead. I don't recall which specific system had the problem though.
      # Probably both, since "\" is a special character in many unix shells, if
      # I recall correctly.

      $Env:MINICONDA = "$Env:HOME/miniconda"
      $Env:PATH = "$Env:MINICONDA${sep}$Env:MINICONDA$bin${sep}$Env:PATH"

  - ps: |
      echo "Python interpreter: $((Get-Command python).Source)" `
      "Python version: $Env:PYTHON_VERSION" `
      "Python architecture: $Env:PYTHON_ARCH" `
      "Miniconda path: $Env:MINICONDA" `
      "" # want an extra line after output

install:
  - ps: echo $Env:PATH
  - ps: conda --version
  - ps: conda config --set always_yes yes --set changeps1 no --set auto_update_conda false
  - ps: conda update -q conda
  - ps: conda install -q conda-build
  - ps: conda info -a
  - ps: |
      # On windows pip is already installed, but it isn't on mac and linux.
      if ($isWindows) {
      python -m pip install --upgrade pip
      } else {
      conda install -c miniconda pip
      }
  - ps: pip install pyinstaller
    # The following command is not written in powershell because of some
    # unresolved errors regarding that. I wonder if they are because of the @
    # symbol.
  - pip install git+git://github.com/ramenbytes/phconvert@close-files-on-error

before_build:
  - ps: cd $Env:APPVEYOR_BUILD_FOLDER

build_script:
  - ps: Get-ChildItem -Path (Get-Location)
  - pyinstaller --hidden-import importlib --debug all --collect-data phconvert gui.py

after_build:
  - ps: 7z a phui-python$Env:PYTHON_VERSION.zip dist

# before_test:
#   - cd %APPVEYOR_BUILD_FOLDER%\notebooks\data
#   - dir
#   - ps: wget https://ndownloader.figshare.com/files/3350666 -OutFile dsdna_d7d17_50_50_1.set
#   - ps: wget https://ndownloader.figshare.com/files/3350669 -OutFile dsdna_d7d17_50_50_1.spc
#   - ps: wget https://ndownloader.figshare.com/files/3350672 -OutFile Pre.ht3
#   - ps: wget https://ndownloader.figshare.com/files/3350663 -OutFile 0023uLRpitc_NTP_20dT_0.5GndCl.sm
#   - ps: wget https://github.com/Photon-HDF5/phconvert/files/231343/Cy3.Cy5_diff_PIE-FRET.ptu.zip -OutFile Cy3.Cy5_diff_PIE-FRET.ptu.zip
#   - 7z e Cy3.Cy5_diff_PIE-FRET.ptu.zip
#   - ps: wget https://ndownloader.figshare.com/files/6955091 -OutFile 161128_DM1_50pM_pH74.ptu
#   - ps: wget https://ndownloader.figshare.com/files/14828594 -O 20161027_DM1_1nM_pH7_20MHz1.ptu
#   - ps: wget https://ndownloader.figshare.com/files/13675271 -OutFile TestFile_2.ptu
#   - ps: wget https://ndownloader.figshare.com/files/14850533 -O trace_T2_300s_1_coincidence.ptu
#   - ps: wget https://ndownloader.figshare.com/files/14890535 -O nanodiamant_histo.phu
#   - ps: wget https://github.com/dwaithe/FCS_point_correlator/raw/master/focuspoint/topfluorPE_2_1_1_1.pt3 -OutFile topfluorPE_2_1_1_1.pt3
#   - ps: wget https://github.com/Photon-HDF5/phconvert/files/1380341/DNA_FRET_0.5nM.pt3.zip -OutFile DNA_FRET_0.5nM.pt3.zip
#   - 7z e DNA_FRET_0.5nM.pt3.zip
#   - ps: wget https://github.com/Photon-HDF5/phconvert/files/1336330/data.zip -OutFile data.zip
#   - 7z e data.zip

# test_script:
#   - cd %APPVEYOR_BUILD_FOLDER%
#   - py.test -v
#   - cd %APPVEYOR_BUILD_FOLDER%\notebooks
#   - python %APPVEYOR_BUILD_FOLDER%/tests/nbrun.py

# after_test:
#   - cd %APPVEYOR_BUILD_FOLDER%
#   - python setup.py bdist_wheel
#   - echo %PATH%
#   - conda deactivate
#   - activate
#   - path
#   - where python
#   - where git
#   - conda build conda.recipe --python=%PYTHON_VERSION%  --quiet
#   - ps: cp $Env:MINICONDA\conda-bld\win-64\phconvert-*.tar.bz2 $Env:APPVEYOR_BUILD_FOLDER\dist

# artifacts:
#   # bdist_wheel puts your built wheel in the dist directory
#   - path: dist\*
#   - path: notebooks\*-out.ipynb
#   - path: notebooks\*.hdf5

artifacts:
  - path: phui*.zip

skip_tags: true

deploy:
  release: ahh-dont-look-$(APPVEYOR_BUILD_VERSION)
  description: 'Executables for others to test'
  provider: GitHub
  auth_token:
    secure: z+LVern0v7e0nQ2sg0JVc1IT27md9G+7ikI0FiyrxHaW3rMs9cy/ZdfyKj2vpwOX # your encrypted token from GitHub
    artifacts:
      - path: '*.zip'
  draft: false
  prerelease: false
  on:
    branch: master                 # release from master branch only
    # APPVEYOR_REPO_TAG: true        # deploy on tag push only
