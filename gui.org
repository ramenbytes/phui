#+TITLE: Gui
* Overview
Creating GUI for [[https:https://github.com/Photon-HDF5/phconvert][phconvert]] to make things more accessible to
non-programmers/non-technical people who aren't familiar/comfortable with the
way things are currently done with the command line and/or code.
* Maya's Feature Suggestions/Requests
** Convert files with gui
Baseline behavior and reason for existence. The tool needs to allow the user to
convert files with phconvert.
** Batch conversion
Maya mentioned allowing the user to convert multiple files at once, like
converting all the files in a directory.
** Generating metadata yaml file
Maya mentioned allowing the user to specify that the yaml file accompanying each
hdf5 file. Without some of the data from this file, the data is rather useless.
Said there are a set number of fields allowed in the data file (now, will that
change?). From phconvert's docs, certain fields are required.
*** Example notebook
There is a phconvert notebook that details how this file is used. There are also
a few example files.
* Useful looking stuff
** Python tkinter widgets
https://docs.python.org/dev/library/tkinter.ttk.html
** Tkdocs
Code examples in Tcl as well as python, ruby, and perl.
https://tkdocs.com/index.html
*** Styles and Themes
Should help with making the ui not horrid looking.

https://tkdocs.com/tutorial/styles.html
** Collapsible panes with tkinter
https://www.geeksforgeeks.org/collapsible-pane-in-tkinter-python/
** Pygubu
Gui design tool for python. Don't think it allows interactive development of
functionality though. That is, while it allows wysiwig gui development it does
not, from what I have seen, allow you to interactively develop the code backing
'commands'/callbacks for the ui. Rather, you design the gui and dump to XML.
Then, at runtime you load up the XML and everything gets hooked up then. I want
to be able to iterate over both code and ui rapidly, without gui regeneration
loops beyond just editing a snippet of code. I want the Lisp experience across
the board. I'll have to weigh the pros and cons of different approaches.

https://github.com/alejandroautalan/pygubu
** Widget Creation
possible folding frame implementation starting point:
https://stackoverflow.com/questions/13141259/expandable-and-contracting-frame-in-tkinter

What is the license on StackOverflow postings?
Creative Commons type: https://stackoverflow.com/help/licensing

Creating your own widgets:
- https://mail.python.org/pipermail/tkinter-discuss/2008-August/001602.html
- https://stackoverflow.com/questions/30489308/creating-a-custom-widget-in-tkinter
- https://effbot.org/zone/tkinter3000-wck.htm

Widget creation kits:
- https://effbot.org/zone/wck-1.htm
- https://pypi.org/project/tkinter3000/
- http://pmw.sourceforge.net/
- https://sourceforge.net/projects/pmw/
** GUI for Prototyping
https://github.com/rabbibotton/clog
A relatively new GUI for Common Lisp that looks like it might be rather easy to
get up and running with. Obviously, since phui is supposed to be delivered in
python I couldn't use it for the official GUI, but it may be a nicer, more
efficient platform upon which to experiment and design the interface. After, I'd
just need to translate the code into python that uses tkinter.
* Notes
** Metadata
Would want ways to selectively show groups, possibly more granular options too
like only supplied options, mandatory, optional, so on. I think different
setups have different requirements too.

Link to the data groups:
https://photon-hdf5.readthedocs.io/en/latest/phdata.html
** Running Tk
Handy function for running Tk with set window dimensions. Useful because stumpwm
blows it up otherwise.
#+BEGIN_SRC python
def run(width='300', hight='200'):
    root = Tk()
    root.geometry(width + 'x' + hight)
    root.mainloop()
#+END_SRC
** Data Format
It would be real nice if all mandatory fields were coalesced into one spot, even
better if they are programmatically introspectable. Right now, I need to hunt
down what is and is not mandatory across all project docs and sources. Some
stuff appears to conflict...
* Direction
On second thought, I think it may make more sense to develop the logic and then
form the gui around that. This is opposed to the gui-first attitude I've had so
far. If I could somehow have convenient way of dealing with the idea of commands
as opposed to raw events, that seems like it would be lovely. From here on out,
probably better to focus on core conversion logic and bootstrap from there. As
much as things can be bootstrapped in python...
** Goal(s)
*** Find Minimal Working Conversion Requirements
* Inbox
** TODO Build PHUI using Github actions
They have macOS systems I can run it on! Also, should help with the whole "Arch
ain't Ubuntu" bit.
https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
** PROJ Point 'n Shoot Conversion
Pass data file and possibly metadata file to function and BLAM, it's converted.
*** Inbox
*** Notes
**** [2021-02-08 Mon 09:07] Don't Re-invent the wheel!
You know how I've been trying to create a generalized interface for converting
files? I've been using the load_<whatever> functions based on the example for
the .sm conversion with yaml metadata file. It turns out that those are not
uniform in their return values. *But* a generalized interface already exists in
near-completeness! Enter, /phconvert.loader/! The functions in there return a
dictionary for passing to the hdf5 conversion function! The only thing missing
is dispatching off of file types, and perhaps splicing in of arbitrary yaml
after the fact. We'll see, I still need to explore it some more. But, this means
that I've likely been working towards something that someone else already did.
Doh!
*** DONE Extract My Conversion Code from Example File
Up 'till now I've been working from the example conversion notebook file,
converted to a python file. Rather cumbersome. Separate my conversion code from
theirs. I already have the test data setup, which is what I needed their
examples for.
*** HOLD Generalize the generation of test data.
May not be necessary, depending on how things go. /May/ end up playing a part in
the main user-facing conversion. We'll see.
*** HOLD Encode Required Fields w/defaults in yml
I figure that we can slurp the defaults up into memory, then add data from the
file and user supplied data. Perhaps we could provide the option for users to
keep their own defaults files.

[2021-02-19 Fri 18:46] Doesn't seem necessary anymore, since the high-level
interface phconvert.loader + the save function takes care of this. I could be
wrong though.
* Notes
